<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cjc&#39;s Blog</title>
  
  <subtitle>弦音。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://comeintocalm.cn/"/>
  <updated>2019-02-01T16:41:57.068Z</updated>
  <id>https://comeintocalm.cn/</id>
  
  <author>
    <name>ComeIntoCalm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>luogu4240毒瘤之神的考验</title>
    <link href="https://comeintocalm.cn/2019/02/01/duliu1/"/>
    <id>https://comeintocalm.cn/2019/02/01/duliu1/</id>
    <published>2019-02-01T15:34:11.000Z</published>
    <updated>2019-02-01T16:41:57.068Z</updated>
    
    <content type="html"><![CDATA[<p>​     </p><h5 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h5><p>求  </p><script type="math/tex; mode=display">\sum_{i = 1}^n{\sum_{j = 1}^m{\phi(ij)}}\\n,m\leq 10^5, T\leq 10^4,n\leq m\\</script><p>思路还是非常巧妙的。   </p><p>看到$ij$粘在一起 所以考虑把$\phi(ij)$这个东西拆开。   考虑如下式子   </p><script type="math/tex; mode=display">\phi(ij) = \frac{\phi(i)\phi(j)gcd(i,j)}{\phi(gcd(i,j))}</script><p>考虑$\phi$的定义  $\phi(i)\phi(j)$ 相对于$\phi(ij)$来说  ， 中间重叠了相同的一部分质因子$p_i$  考虑除去这些质因子   </p><p>可以除一下$\phi(gcd(i,j))$  重叠的质因子是属于$gcd(i,j)$的  但是除掉$\phi(gcd(i,j))$以后 $ij $ 也被多除掉了$gcd(i,j)$，</p><p>所以考虑再把$gcd(i,j)$乘回来。  得到上式。</p><p>此时得到 式子 </p><script type="math/tex; mode=display">\sum_{i = 1}^n{\sum_{j = 1}^m{\frac{\phi(i)\phi(j)gcd(i,j)}{\phi(gcd(i,j))}}}</script><p>我们习惯性的把$gcd$提出来。得到   </p><script type="math/tex; mode=display">\sum_{d = 1}^{n}{\frac{d}{\phi(d)}}{\sum_{i = 1}^n{\sum_{j = 1}^m{\phi(i)\phi(j)[gcd(i,j) == d]}}}</script><p>再把后面除掉$d$  </p><script type="math/tex; mode=display">\sum_{d = 1}^{n}{\frac{d}{\phi(d)}}{\sum_{i = 1}^{\frac{n}{d}}{\sum_{j = 1}^{\frac{m}{d}}{\phi(id)\phi(jd)[i\perp j]}}}</script><p>来一发莫反   </p><script type="math/tex; mode=display">\sum_{d = 1}^{n}{\frac{d}{\phi(d)}}{\sum_{i = 1}^{\frac{n}{d}}{\sum_{j = 1}^{\frac{m}{d}}{\phi(id)\phi(jd)\sum_{e\mid i,e\mid j}{\mu(e)}}}}</script><p>把枚举$\phi(id)\phi(jd)$作为系数  对每个$e$造成影响的是$e$在上界为$\frac{n}{d}$范围内的$d$的倍数。</p><script type="math/tex; mode=display">\sum_{d = 1}^{n}{\frac{d}{\phi(d)}}{\sum_{e = 1}^{\frac{n}{d}}{\mu(e)\sum_{i = 1}^{\frac{n}{de}}{\phi(ide)\sum_{j = 1}^{\frac{m}{de}}{\phi(jde)}}}}</script><p>接着枚举$de$的乘积$T$ 然后$\frac{d}{\phi(d)}$和$\mu(e)$脱成了卷积。</p><script type="math/tex; mode=display">\sum_{T = de = 1}^{n}{\sum_{i = 1}^{\frac{n}{T}}{\phi(iT)\sum_{j = 1}^{\frac{m}{T}}{\phi(jT)}}\sum_{d\mid T}{\mu(\frac{T}{d})(\frac{d}{\phi(d)})}}</script><p>设$G(\frac{n}{T},T) =  \sum<em>{i = 1}^{\frac{n}{T}}{\phi(iT) }$ ， $f(T) = \sum</em>{d\mid T}{\mu(\frac{T}{d})(\frac{d}{\phi(d)})}$    于是有   </p><script type="math/tex; mode=display">\sum_{T = de = 1}^{n}{G(\frac{n}{T},T)G(\frac{m}{T},T)f(T)}</script><p>其中$G$可以调和级数复杂度处理出来 丢到一个$vector$里, $f$也可以调和级数复杂度处理。  </p><p>其中</p><script type="math/tex; mode=display">G(\lfloor\frac{n}{T}\rfloor,T) =  \sum_{i = 1}^{\lfloor\frac{n}{T}\rfloor}{\phi(iT) }= \sum_{i = 1}^{\lfloor\frac{n}{T}\rfloor - 1}{\phi(iT) }+\phi(\lfloor\frac{n}{T}\rfloor T)= G(\lfloor\frac{n}{T}\rfloor - 1,T) + \phi(\lfloor\frac{n}{T}\rfloor T)</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​     &lt;/p&gt;
&lt;h5 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h5&gt;&lt;p&gt;求  &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\
      
    
    </summary>
    
    
      <category term="莫比乌斯反演" scheme="https://comeintocalm.cn/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
      <category term="数论" scheme="https://comeintocalm.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>2019新征途。</title>
    <link href="https://comeintocalm.cn/2019/01/01/NewYear/"/>
    <id>https://comeintocalm.cn/2019/01/01/NewYear/</id>
    <published>2019-01-01T12:26:16.000Z</published>
    <updated>2019-01-01T12:30:24.361Z</updated>
    
    <content type="html"><![CDATA[<p>总的来说18年啥都没干, 破水平还是破水平…..</p><p>19年加油。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;总的来说18年啥都没干, 破水平还是破水平…..&lt;/p&gt;
&lt;p&gt;19年加油。&lt;/p&gt;

      
    
    </summary>
    
      <category term="2018年度总结" scheme="https://comeintocalm.cn/categories/2018%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>SHOI 2015 BeyondGun</title>
    <link href="https://comeintocalm.cn/2018/12/23/BeyondGun/"/>
    <id>https://comeintocalm.cn/2018/12/23/BeyondGun/</id>
    <published>2018-12-23T04:32:24.000Z</published>
    <updated>2018-12-23T06:33:50.254Z</updated>
    
    <content type="html"><![CDATA[<p>​     </p><p>屑题</p> <a id="more"></a><p>$T$组数据 求 $\sum_{i = 0}^{k}{C_n^i} (mod \space2333)$ 其中 t &lt;= 1e5, n, k &lt;= 1e18….    </p><p>设$f(n,k) = \sum_{i = 0}^{k}{C_n^i} (mod \space2333)$  然后用卢卡斯展开一下    </p><p>得到    </p><script type="math/tex; mode=display">\begin{split}\\f(n,k) &= \sum_{i = 0}^{k}{C_n^i} \%2333\space(mod\space p)\\&= \sum_{i = 0}^{\lfloor\frac{k}{p}\rfloor} {C ^ {  \space i }_{\frac{n}{p}}}{\sum_{j = 0}^{\min(p-1,k - pi)}{C_{n \% p}^j}} \space  (mod \space p)\\&= f(n \% p,p - 1) \times f(n/p, k /p - 1) + C_{n/p}^{k/p} \times f(n \% p, k \% p)\end{split}</script><p>然后把那个小块暴力算掉就好了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll p = <span class="number">2333</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e3</span> + <span class="number">7</span>;</span><br><span class="line">ll C[N][N], f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Lucas</span> <span class="params">(ll m, ll n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!n || n == m || !m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (m &lt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> (C[m % p][n % p] * Lucas (m / p, n / p)) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">func</span> <span class="params">(ll n, ll k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!n || !k) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (n &lt; p &amp;&amp; k &lt; p) <span class="keyword">return</span> f[n][k];</span><br><span class="line"><span class="keyword">return</span> (func(n / p, k / p - <span class="number">1</span>) * f[n % p][p - <span class="number">1</span>] % p </span><br><span class="line">+ Lucas (n / p, k / p) * f[n % p][k % p] % p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T; ll n, k;</span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p + <span class="number">2</span>; i++) &#123;</span><br><span class="line">C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">C[i][j] = (C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j]) % p;</span><br><span class="line">&#125; <span class="comment">//f[0][0] = 1;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= p + <span class="number">2</span>; i++) f[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= p + <span class="number">2</span>; i++) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p + <span class="number">2</span>; j++)</span><br><span class="line">f[i][j] = (C[i][j] + f[i][j - <span class="number">1</span>]) % p;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">scanf</span> (<span class="string">"%lld%lld"</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">"%lld\n"</span>, func(n, k) % p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​     &lt;/p&gt;
&lt;p&gt;屑题&lt;/p&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://comeintocalm.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="Lucas" scheme="https://comeintocalm.cn/tags/Lucas/"/>
    
      <category term="整除分块" scheme="https://comeintocalm.cn/tags/%E6%95%B4%E9%99%A4%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>莫比乌斯反演</title>
    <link href="https://comeintocalm.cn/2018/12/15/Mul-Anti/"/>
    <id>https://comeintocalm.cn/2018/12/15/Mul-Anti/</id>
    <published>2018-12-15T15:15:14.000Z</published>
    <updated>2019-01-04T14:53:34.765Z</updated>
    
    <content type="html"><![CDATA[<p>莫反入门</p><a id="more"></a>      <script type="math/tex; mode=display">\sum_{d|n}{ {\phi} (d)} = n \\ \sum_{d|n}{ {\mu} (d)} = [n == 1]  \\ {\phi}(n) = \sum_{d|n}{\mu(d)\frac{n}{d}}\\ \sum_{i = 1}^{n}{[(i,n) == 1] \times i} =    \frac{d \times {\phi}(n) + [d == 1]}{2}\\    \sum_{i = 1}^{n}{\sum_{j = 1}^{m}}{d(ij)} = \sum_{d | n}{\sum_{k|m}{[(d,k) == 1]}}\\</script><p>求 $\sum_{i =1}^{n}{(i, n)}$  n, q 均为5e4范围    </p><script type="math/tex; mode=display">\sum_{i = 1}^{n}{(i, n)}  \\=\sum_{d|n}{d\sum_{i = 1}^{n}{[(i,n) == d]}}\\=\sum_{d|n}{d\sum_{i = 1}^{\frac{n}{d}}{[(i,\frac{n}{d}) == 1]}}\\=\sum_{d|n}{d{\phi}(\frac{n}{d})}\\</script><p>这样的话时间复杂度为$\theta(q\sqrt {n})$    </p><p>求 </p><script type="math/tex; mode=display">\sum_{i =1} ^ {n}{\sum_ {j = 1} ^ {m}f((i,j))}n ≤ m  , n, q仍然是5e4范围</script><script type="math/tex; mode=display">\begin{split}&\sum_{i = 1}^{n}{\sum_{j = 1}^{m}{f(gcd(i,j))}}\\= &\sum_{d = 1}^{n}{f(d)\sum_{i = 1}^{n}{\sum_{j = 1}^{m}{[gcd(i,j) == d]}}}\\=&\sum_{d = 1}^{n}{f(d)\sum_{i = 1}^{\frac{n}{d}}{\sum_{j = 1}^{\frac{m}{d}}{[gcd(i,j) == 1]}}}\\=&\sum_{d = 1}^{n}{f(d)\sum_{i = 1}^{\frac{n}{d}}{\sum_{j = 1}^{\frac{m}{d}}{\sum_{e|i,e|j}}{{\mu}(e)}}}\\=&\sum_{d = 1}^{n}{f(d)\sum_{e = 1}^{\frac{n}{d}}{{{\mu}(e)}}\lfloor{\frac{n}{de}}\rfloor\lfloor{\frac{m}{de}}\rfloor}\\=&\sum_{T = de = 1}^{n}{\lfloor{\frac{n}{T}}\rfloor\lfloor{\frac{m}{T}}\rfloor\sum_{d|T}{f(d){\mu}{(\frac{T}{d})}}}\\=&\sum_{T = de = 1}^{n}{\lfloor{\frac{n}{T}}\rfloor\lfloor{\frac{m}{T}}\rfloor \space g(T)}\\\end{split}</script><p>​     </p><p>一开始可以考虑枚举对于值为$d$的$gcd(i,j)$有多少对，就可以把$f(d)$单独拿出来  后面的当成系数看。   </p><p>考虑$gcd(i,j)$为d的有多少对的时候 ， 可以想到每$d$个数里至多只有一个含有$d$这个因子，于是可以考虑把上界和判断值  </p><p>都除以$d$， 然后就变成了求互质的$i,j$对数。   </p><p>判断一个数是不是$1$这个玩意可以莫比乌斯反演一发 ， 现在出来一个新的系数$e$，   </p><p>哎咋看着越来越……麻烦了啊…..    等等….     </p><p>这个时候可以发现 实际上就是在统计$\mu(e)$的和  这个时候我们再来考虑统计每个$\mu(e)$的系数，  因为在原来的位置中$e$是   </p><p>作为因子出现  这个时候统计$\mu(e)$的系数实际上就是在统计合法的倍数对数于是就有$ K = n/de * m / de$   (下取整)   </p><p>这个时候发现 K 的取值实际上是只受$d e$这两个东西影响的  所以我们考虑枚举$T = de$ 也就是考虑枚举$K$的系数 ，   </p><p>后面枚举$T$的因子$d$实际上就是考虑$f(d)\mu(\frac{T}{d})$ 两者乘积对于K的贡献。也就是对于每个数$d$有以上贡献。   </p><p>后面那个东西可以</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j * i &lt;= n; j++) g[i * j] += f[i] * mu[j];</span><br></pre></td></tr></table></figure><p>复杂度是个调和级数。    每次回答可以数论分块, 就是求 $K$取值相同的一块左右边界。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) </span><br><span class="line">  r = min (n / (n / l), m / (m / l)) ans +=  (S(r) - S(l - <span class="number">1</span>)) * K;</span><br></pre></td></tr></table></figure><p>$S(T)$是$g$的前缀和。 这个玩意可以做到$\sqrt{n}$回答一次询问。     </p><p>对于因子枚举那部分 ， 因为是求和 所以有对称性 ， 意思就是说可以把$f(d)$换成$f(\frac{T}{d})$  当然其他的也要换一下。</p><p>很多时候对于$g$这种函数可以线性筛   实在不行暴力加一下， 慢不到哪里去的。  还有一些时候需要杜教筛。</p><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p>咕咕咕    </p><p>基本上套Eg2就完事… 自己去搜搜8……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;莫反入门&lt;/p&gt;
    
    </summary>
    
    
      <category term="莫比乌斯反演" scheme="https://comeintocalm.cn/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
      <category term="数论" scheme="https://comeintocalm.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>NOIp 2018 day1 t3 road</title>
    <link href="https://comeintocalm.cn/2018/11/26/xxx/"/>
    <id>https://comeintocalm.cn/2018/11/26/xxx/</id>
    <published>2018-11-26T14:42:43.000Z</published>
    <updated>2018-12-09T09:30:41.125Z</updated>
    
    <content type="html"><![CDATA[<p>​                  </p><p>这题考场上直接看错了啊……一顿狂码没过样例发现不太对劲……</p><p>最后半小时反应过来然后打了暴力回头10min淦完t2….</p><p>day1自然就爆炸了…..     </p><a id="more"></a><h5 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h5><p>给定一棵N个点的树 边有边权(大于0) 现在要划分出K条边不相交的链 使得最短的链最长….    </p><p>数据范围5e4….   </p><h5 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h5><p>极大化最小值上来先二分答案 二分的值是链的长度 看看能不能划分出K条链来   </p><p>接下来就是如何检验K条链是不是能被划分出来。    </p><p>随机选点为根 然后自底部向根合并链。   </p><p>现在有点$x$和对应其儿子$son[x][k]$  </p><p>显然对于一条链来说 有两种选择   </p><p>从儿子$son[x][k]$延伸上来的链  </p><p>一可以通过$e[i].w$和$e[j].w$这两条边和另一个儿子$son[x][q]$延伸上来的链合并   </p><p>二呢可以通过$e[i].w$延伸到x然后通过$e[pre].w$延伸到x的父亲fa   </p><p>其实不需要dp   </p><p>定义$f[x]$为点x的子树内向上延伸到x的合法最长链。</p><p>合法的定义是   x的子树内两两合并完了以后剩下的里面选一条最大的  </p><p>有cnt记录到达二分的长度$mid$的链条数  </p><p>对于$x$子树内的链  扔到一个平衡树里会比较好处理  </p><p>每次把最小的挑出来pop掉然后求$mid - now.w$的后继 如果有后继的话后继也pop掉     </p><p>$now.w$是你每次挑的最小链的长度….  </p><p>然后求个最大 就是f[x]   </p><p>把整棵树做完以后发现cnt 还是&lt;K 就return 0 </p><p>否则在做的过程中就return 1 然后清空所有数据…</p><p>这题就做完了。   </p><p>  比day2t1 简单多啦…..      </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">min</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="keyword">return</span> a &gt; b ? b : a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e4</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> last[N], tot = <span class="number">0</span>, ans, dp[N], mid;</span><br><span class="line"><span class="keyword">int</span> srtNode;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> next, to, w;&#125;e[N * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[++tot].next = last[u], e[tot].w = w, e[tot].to = v, last[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Splay</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> root, cnt, ch[N][<span class="number">2</span>], size[N], A[N], f[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span> <span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;size[u] = size[ch[u][<span class="number">0</span>]] + size[ch[u][<span class="number">1</span>]] + <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getwho</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> ch[f[x]][<span class="number">0</span>] == x ? <span class="number">0</span> : <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Rotate</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> who = getwho (x), fa = f[x], gra = f[f[x]];</span><br><span class="line">        ch[gra][getwho (fa)] = x, f[x] = gra;</span><br><span class="line">        ch[fa][who] = ch[x][who ^ <span class="number">1</span>], f[ch[x][who ^ <span class="number">1</span>]] = fa;</span><br><span class="line">        ch[x][who ^ <span class="number">1</span>] = fa, f[fa] = x;</span><br><span class="line">        pushup (fa), pushup (x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (f[x] != tar) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f[f[x]] != tar) &#123;</span><br><span class="line">                Rotate (getwho (f[x]) == getwho (x) ? f[x] : x);</span><br><span class="line">            &#125; Rotate (x);</span><br><span class="line">        &#125; <span class="keyword">if</span> (!tar) root = x;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">findkth</span> <span class="params">(<span class="keyword">int</span> key)</span> </span>&#123; <span class="keyword">int</span> o = root;</span><br><span class="line">        <span class="keyword">while</span> (o) <span class="keyword">if</span> (size[ch[o][<span class="number">0</span>]] + <span class="number">1</span> == key) &#123;splay (o, <span class="number">0</span>); srtNode = o;<span class="keyword">return</span> A[o];&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (key &lt;= size[ch[o][<span class="number">0</span>]]) o = ch[o][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> key -= size[ch[o][<span class="number">0</span>]] + <span class="number">1</span>, o = ch[o][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (!x) &#123;root = y; <span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span> (!y) &#123;root = x; <span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">while</span> (ch[y][<span class="number">0</span>]) size[y] += size[x], y = ch[y][<span class="number">0</span>];</span><br><span class="line">        size[y] += size[x], f[x] = y, ch[y][<span class="number">0</span>] = x, splay (x, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; splay (x, <span class="number">0</span>);</span><br><span class="line">        f[ch[x][<span class="number">0</span>]] = f[ch[x][<span class="number">1</span>]] = <span class="number">0</span>; merge (ch[x][<span class="number">0</span>], ch[x][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; A[++cnt] = x, size[cnt] = <span class="number">1</span>, ch[cnt][<span class="number">0</span>] = ch[cnt][<span class="number">1</span>] = f[cnt] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;root = cnt; <span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> last, o = root;</span><br><span class="line">        <span class="keyword">while</span> (o) ++size[last = o], o = x &lt; A[o] ? ch[o][<span class="number">0</span>] : ch[o][<span class="number">1</span>];</span><br><span class="line">        f[cnt] = last, ch[last][x &lt; A[last] ? <span class="number">0</span> : <span class="number">1</span>] = cnt, splay (cnt, <span class="number">0</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getNext</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">int</span> o = root, k = inf, last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (o) <span class="keyword">if</span> (A[o] &gt;= x) k = A[o], o = ch[last = o][<span class="number">0</span>], srtNode = o;</span><br><span class="line">            <span class="keyword">else</span> o = ch[last = o][<span class="number">1</span>];</span><br><span class="line">        splay (last, <span class="number">0</span>); <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">int</span> o = root;</span><br><span class="line">        <span class="keyword">while</span> (o) <span class="keyword">if</span> (A[o] == x) &#123;splay (o, <span class="number">0</span>); <span class="keyword">return</span> o;&#125;</span><br><span class="line">            <span class="keyword">else</span> o = A[o] &gt; x ? ch[o][<span class="number">0</span>] : ch[o][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    dp[x] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = last[x]; i; i = e[i].next) &#123; <span class="keyword">int</span> to = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (to == fa) <span class="keyword">continue</span> ;</span><br><span class="line">        dfs (to, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = last[x]; i; i = e[i].next) &#123; <span class="keyword">int</span> to = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (to == fa) <span class="keyword">continue</span> ;</span><br><span class="line">        <span class="keyword">if</span> (e[i].w + dp[to] &gt;= mid) &#123;</span><br><span class="line">            ans++; </span><br><span class="line">            <span class="keyword">if</span> (ans &gt;= m) &#123;</span><br><span class="line">                <span class="keyword">while</span> (t.size[t.root]) t.del (t.root);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> t.insert (e[i].w + dp[to]);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">while</span> (t.size[t.root]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans &gt;= m) &#123;</span><br><span class="line">                <span class="keyword">while</span> (t.size[t.root]) t.del (t.root);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t.size[t.root] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = t.findkth(<span class="number">1</span>);</span><br><span class="line">            dp[x] = max (k, dp[x]);</span><br><span class="line">            t.del(t.root);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> k = t.findkth (<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        t.del (srtNode);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> nowx = t.getNext (mid - k );</span><br><span class="line">    <span class="comment">//tot++;</span></span><br><span class="line">    <span class="comment">//printf ("%d ", tot);</span></span><br><span class="line">        <span class="keyword">if</span> (nowx != inf) &#123;</span><br><span class="line">            ans++, t.del (t.find(nowx));</span><br><span class="line">        &#125; <span class="keyword">else</span> dp[x] = max (dp[x], k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    t.cnt = t.root = <span class="number">0</span>;</span><br><span class="line">    dfs (<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ans &gt;= m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> minx = inf, upmax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, z; <span class="built_in">scanf</span> (<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">        add (x, y, z), add (y, x, z);</span><br><span class="line">        minx = min (z, minx), upmax += z;</span><br><span class="line">    &#125; tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = minx, r = upmax;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123; </span><br><span class="line">        mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check ()) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="built_in">printf</span> (<span class="string">"%d"</span>, l);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​      </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​                  &lt;/p&gt;
&lt;p&gt;这题考场上直接看错了啊……一顿狂码没过样例发现不太对劲……&lt;/p&gt;
&lt;p&gt;最后半小时反应过来然后打了暴力回头10min淦完t2….&lt;/p&gt;
&lt;p&gt;day1自然就爆炸了…..     &lt;/p&gt;
    
    </summary>
    
      <category term="OI题解" scheme="https://comeintocalm.cn/categories/OI%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="树上问题" scheme="https://comeintocalm.cn/tags/%E6%A0%91%E4%B8%8A%E9%97%AE%E9%A2%98/"/>
    
      <category term="贪心" scheme="https://comeintocalm.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>NOIp 2018 day2 t1 travel</title>
    <link href="https://comeintocalm.cn/2018/11/25/travel/"/>
    <id>https://comeintocalm.cn/2018/11/25/travel/</id>
    <published>2018-11-25T14:53:46.000Z</published>
    <updated>2018-12-09T09:28:48.549Z</updated>
    
    <content type="html"><![CDATA[<p>为啥这题暴力剪枝就能过啊…..一点都不科学……<br>太欺负人了<br>我来写个$\theta (NlogN)$的吧…..          </p> <a id="more"></a><p>基环树放day2t1不太友好吧…..算了都说了是NOIplus了对不对呀….   </p><p>很明显 如果放在树上就有几个固定的性质     </p><p><strong>1   在能选择的范围之内选择最小的</strong>   </p><p><strong>2   能选择进入的是当前点u的儿子节点</strong>    </p><p><strong>3   这棵树一定以1为根</strong>   </p><p>这样就可以60分了    </p><p><del>考场上脑抽还有一点分类讨论完了结果跑去淦t2结局悲惨最后10分钟回来打了个暴力就走了</del>   </p><p>如果是基环树？？     </p><p>很明显只有一个环   </p><p>第三个性质放在基环树上照样行得通….  </p><p>有几个点需要注意一下   </p><p>在环上走的话 如果你要处理儿子那么就代表直接work了他的所有后代      </p><p>不向nextNode(环上的下一个点)走而是回到上一节点时需要处理这个点所有不在环上的子树..     </p><p>所以你每次走是比较nextNode和不在环上的直接儿子 </p><p>如果没有儿子了就把stacktop的点和nextNode比较</p><p><strong>小的话很明显就可以弹空stack然后return到环上的初始点了  这是和暴力的根本区别</strong>   </p><p>如果儿子小的话直接处理儿子   </p><p>如果nextNode小的话就把儿子按照从大到小的顺序压到stack里   </p><p>这时候如果nextNode已经访问过 那么就直接挨个pop然后work掉每个子树 保证了顺序的合法性   </p><p>如果!top了看下在环上最开始接触的点的另外一个邻居点和环上最开始接触的点的儿子   </p><p>还是按照dfs做不过不能再回头了而是一遍跑完  只比较nextNode和son 如果son空了不用管栈      </p><p>这样就把环做掉了   </p><p>很明显点1如果在环上的话直接做就行   </p><p>如果点1不在环上   </p><p>那么这个环一定是在点1的某个子树里   </p><p>然后按照60分的做法就行了 如果进到环里就按照上边的做   </p><p>进到环里的第一个点设成环上的初始点…  </p><p>下面是分类讨论时间   注意下面的son都是直接儿子而不是所有后代</p><p>算了我还是贴上代码吧….       </p><p>​     </p><p>​     </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">7e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)</span><br><span class="line">        ret = ret * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">    <span class="keyword">return</span> ret * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> last[N], cnt, root;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> next, to;</span><br><span class="line">&#125; e[N * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  e[++cnt].next = last[u], e[cnt].to = v, last[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">stack</span>[N], vis[N], cNode[N], backNode;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find_circle</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">  vis[x] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = last[x]; i; i = e[i].next) &#123;</span><br><span class="line">    <span class="keyword">int</span> to = e[i].to;</span><br><span class="line">    <span class="keyword">if</span> (to == fa) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (vis[to]) &#123;</span><br><span class="line">      cNode[to] = cNode[x] = <span class="number">1</span>;</span><br><span class="line">      backNode = to;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> oncircle = find_circle (to, x);</span><br><span class="line">    <span class="keyword">if</span> (oncircle &amp;&amp; to != backNode) &#123;</span><br><span class="line">      cNode[x] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> idx[N], flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"><span class="built_in">std</span> :: <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; xNode[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work2</span> <span class="params">(<span class="keyword">register</span> <span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x]) <span class="keyword">return</span> ;</span><br><span class="line">  idx[++cnt] = x, vis[x] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = last[x]; i; i = e[i].next) &#123;</span><br><span class="line">    <span class="keyword">int</span> to = e[i].to;</span><br><span class="line">    <span class="keyword">if</span> (to == fa || vis[to]) <span class="keyword">continue</span>;</span><br><span class="line"> xNode[x].push_back(to);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span> :: sort (xNode[x].begin(), xNode[x].end());</span><br><span class="line">  <span class="keyword">int</span> k = xNode[x].size() - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++) &#123;</span><br><span class="line">    work2 (xNode[x][i], x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span> <span class="params">(<span class="keyword">register</span> <span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x]) <span class="keyword">return</span> ;</span><br><span class="line">  idx[++cnt] = x, vis[x] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = last[x]; i; i = e[i].next) &#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> to = e[i].to;</span><br><span class="line">    <span class="keyword">if</span> (to == fa || vis[to]) <span class="keyword">continue</span> ;</span><br><span class="line">  xNode[x].push_back(to);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span> :: sort (xNode[x].begin(), xNode[x].end());</span><br><span class="line">  <span class="keyword">register</span> <span class="keyword">int</span> k = xNode[x].size () - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> to = xNode[x][i];</span><br><span class="line">    <span class="keyword">if</span> (vis[to]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = k; j &gt; i; j--) </span><br><span class="line">        <span class="built_in">stack</span>[++top] = xNode[x][j], f[<span class="built_in">stack</span>[top]] = x;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cNode[to] &amp;&amp; i == k) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">stack</span>[top] &lt; to &amp;&amp; top &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cNode[to]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = k; j &gt; i; j--)</span><br><span class="line">        <span class="built_in">stack</span>[++top] = xNode[x][j], f[<span class="built_in">stack</span>[top]] = x;</span><br><span class="line">      dfs (to, x);</span><br><span class="line">      flag = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (x == root)</span><br><span class="line">        <span class="keyword">while</span> (top &amp;&amp; cNode[f[<span class="built_in">stack</span>[top]]]) top--, work2 (<span class="built_in">stack</span>[top + <span class="number">1</span>], f[<span class="built_in">stack</span>[top + <span class="number">1</span>]]);</span><br><span class="line">      <span class="keyword">return</span> ;</span><br><span class="line">    &#125; <span class="keyword">else</span> work2 (to, x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x]) <span class="keyword">return</span>;</span><br><span class="line">  idx[++cnt] = x, vis[x] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = last[x]; i; i = e[i].next) &#123;</span><br><span class="line">    <span class="keyword">int</span> to = e[i].to;</span><br><span class="line">    <span class="keyword">if</span> (to == fa) <span class="keyword">continue</span>;</span><br><span class="line">   xNode[x].push_back(to);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span> :: sort (xNode[x].begin(), xNode[x].end());</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; xNode[x].size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cNode[xNode[x][i]] &amp;&amp; !flag) root = xNode[x][i], dfs (xNode[x][i], x);</span><br><span class="line">    <span class="keyword">else</span> work (xNode[x][i], x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  n = read(), m = read();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    x = read(), y = read();add (x, y), add (y, x);</span><br><span class="line">  &#125;</span><br><span class="line">  cnt = <span class="number">0</span>;</span><br><span class="line">  find_circle (<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) vis[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (m == n - <span class="number">1</span>) &#123;</span><br><span class="line">    work (<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span> (<span class="string">"%d "</span>, idx[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cNode[<span class="number">1</span>]) root = <span class="number">1</span>, dfs (<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span> work (<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span> (<span class="string">"%d "</span>, idx[i]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以说这题暴力和NlogN做法的本质区别就是个有序的栈和分类讨论…..</p><p>哎….心态也是实力的一部分啊….</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为啥这题暴力剪枝就能过啊…..一点都不科学……&lt;br&gt;太欺负人了&lt;br&gt;我来写个$\theta (NlogN)$的吧…..          &lt;/p&gt;
    
    </summary>
    
      <category term="OI题解" scheme="https://comeintocalm.cn/categories/OI%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="树上问题" scheme="https://comeintocalm.cn/tags/%E6%A0%91%E4%B8%8A%E9%97%AE%E9%A2%98/"/>
    
      <category term="贪心" scheme="https://comeintocalm.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="基环树" scheme="https://comeintocalm.cn/tags/%E5%9F%BA%E7%8E%AF%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>期望与概率题目积累</title>
    <link href="https://comeintocalm.cn/2018/11/02/%E6%9C%9F%E6%9C%9B%E4%B8%8E%E6%A6%82%E7%8E%87%E9%A2%98%E7%9B%AE%E7%A7%AF%E7%B4%AF/"/>
    <id>https://comeintocalm.cn/2018/11/02/期望与概率题目积累/</id>
    <published>2018-11-02T00:14:05.000Z</published>
    <updated>2018-12-15T14:42:52.912Z</updated>
    
    <content type="html"><![CDATA[<p>就是从最简单的开始积累期望和概率题目   </p><a id="more"></a><h5 id="1-SPOJ-Favorite-Dice"><a href="#1-SPOJ-Favorite-Dice" class="headerlink" title="1 SPOJ Favorite Dice"></a>1 SPOJ Favorite Dice</h5><p>一个 $N$ 面 骰子 问每一面都被甩到的 次数期望是多少。  </p><p>考虑拥有一个包含i面集合时甩出来有以下的答案贡献，移项逆推 。  </p><script type="math/tex; mode=display">dp[i] = \frac {i}{n} * dp[i] + \frac{n - i}{n} * dp[i + 1] + 1</script><h5 id="2-SGU-495-Kids-and-Prizes"><a href="#2-SGU-495-Kids-and-Prizes" class="headerlink" title="2 SGU 495 Kids and Prizes"></a>2 SGU 495 Kids and Prizes</h5><p>$M$个人排队来取$N$个礼物 每个人打开的盒子 可能有礼物 也可能空 有礼物的话拿走礼物并放回盒子 没有礼物 直接放回盒子 问$M$个人取走礼物的期望个数   </p><p>考虑前i个人 能够取到的礼物期望个数 显然第一个人为1   </p><script type="math/tex; mode=display">dp[i] = \frac {n - dp[i - 1]}{n} + dp[i - 1]</script><h5 id="3-ZOJ-3640-Help-Me-Escape"><a href="#3-ZOJ-3640-Help-Me-Escape" class="headerlink" title="3 ZOJ 3640 Help Me Escape"></a>3 ZOJ 3640 Help Me Escape</h5><p>现在有n个OI考场 每个考场有固定的水平 $C[i]$ 你是个喜欢炸鱼但是水平不怎么样的OI选手    </p><p>你拥有初始战斗力 $F$ ,每天你会随机选一个考场炸鱼 如果你的 当前水平$F &gt; C[i]$ 那么就会炸鱼成功  </p><p>在炸鱼成功之后 你会装b $t [ i ]$ 天之后再回家  </p><p>如果没有成功 你就会去OJ上刷题 将自己的水平提升到 $F + C[i]$ 然后次日继续随机挑考场炸鱼  </p><p>问回家的期望天数  </p><p>可以考虑战斗力是 $f$ 时回家的期望天数 于是得到公式   </p><script type="math/tex; mode=display">dp[ f ] = \sum_{i = 1}^{n}{\begin{cases}\frac{1}{n} * t[i],\space if (f > C[i])\space\\\frac{1}{n}*dp[f+C[i]], \space if (f <= C[i])\space\end{cases}}</script><p>dp直接做不太容易啊….记忆化搜索一发就好了….</p><h5 id="4-HDU4035-Maze"><a href="#4-HDU4035-Maze" class="headerlink" title="4 HDU4035 Maze"></a>4 HDU4035 Maze</h5><p>现在有一棵树 第一天在1号节点 对于每一个节点$i$有三种可能</p><p>$1. GG,回到点1 \space 对应概率为 K[i]$     </p><p>$2.被救,\space 对应概率为 E[i]$    </p><p>$3.等概率地走到相邻节点$      </p><p>问被救走的天数期望 不能则printf $impossible$    </p><p>这个题存在后效性       </p><p>如果求$dp[S]​$ 那么$dp[S]​$ 和 $S​$ 的子节点以及父节点都有直接关系 去求子节点时又和$S​$ 本身有关系…     </p><p>一开始以为要高斯消元 发现自己tooyoungtooNaive… N^3用个毛…</p><p>然后发现了厉害的方法….</p><p>找办法排除后效性  大概就是找个公式 然后公式本身和后效性有关 然后公式之间的后效性可以相互抵消…     </p><p>然后就引用一发_kuangbin爷的….   </p><p>设$E[i]$表示在点i处, 要逃出的边数期望。 那么$ans = dp[1]$   </p><p>对于叶子结点来说    </p><script type="math/tex; mode=display">\begin{equation}\begin{split}dp[i] = K[i] * dp[1] + E[i] * 0 + (1 - K[i] - E[i])*(dp[fa[i]] + 1)\\= K[i] * dp[1] + \frac{1 - K[i] - E[i]}{deg[i]} * dp[fa[i]] + (1 - E[i] - K[i])\end{split}\end{equation}</script><p>对于非叶子结点     </p><script type="math/tex; mode=display">\begin{equation}\begin{split}dp[i] = K[i] * dp[1] + E[i] * 0 + \frac{(1 - E[i] - K[i])}{deg[i]}*(dp[fa[i]] + 1 + \sum_{son∈i}{dp[son]})\\= K[i] * dp[1] + \frac{(1 - E[i] - K[i])}{deg[i]} * dp[fa[i]] + \frac{1 - E[i] - K[i]}{deg[i]} * \sum_{son∈i}{dp[son]}\end{split}\end{equation}</script><p>然后再设对于每个节点来说        </p><script type="math/tex; mode=display">dp[i] = A[i] * dp[1] + B[i] * dp[fa[i]] +C[i];</script><p>对于非叶子结点$i$  设$j$为$i$的孩子,于是有             </p><script type="math/tex; mode=display">\begin{equation}\begin{split}\sum_{son∈i}{dp[son]} &= \sum{dp[j]}\\&=\sum{(A[j] * dp[1] + B[j] * dp[fa[j]] + C[j])}\\&=\sum{(A[j] * dp[1] + B[j] * dp[i] + C[j])}\\\end{split}\end{equation}</script><p>把上面的式子带进去 就可以得到    </p><script type="math/tex; mode=display">(1 - \frac{1 - K[i] - E[i]}{deg[i]} * \sum{B[j]}) * dp[i] = (K[i] + (\frac{1 - K[i] - E[i]}{deg[i]}) * \sum{A[j]}) * dp[1] \\+ (\frac{1 - K[i] - E[i]}{deg[i]}) * dp[fa[i]] +(1 - K[i] - E[i]) + \frac{1 - K[i] - E[i]}{deg[i]} * \sum{C[j]}</script><p>由此可得     </p><script type="math/tex; mode=display">\begin{split}A[i] &= (K[i] + \frac{1 - K[i] - E[i]}{deg[i]}*\sum{A[j]})\\B[i] &= \frac{1 - K[i] - E[i]}{m}\\C[i] &= ((1 - K[i] - E[i]) + \frac{1 - K[i] - E[i]}{m} * \sum{C[j]})\end{split}</script><p>然后用dfs做。   </p><p>再来看个休闲题…..     </p><h5 id="5-CF-280C"><a href="#5-CF-280C" class="headerlink" title="5 CF 280C"></a>5 CF 280C</h5><p>给出一棵点均为白色的树 每次随机等概率选择一未染黑的点 将他及其子树染黑 问染黑整个树的期望操作次数    </p><p>直接做不太好下手   </p><p>所以考虑期望的线性性,$E(ax + by) = a \times E(x) + b \times E(y)$    </p><p>所以问题就转化成求$\sum{ENode[i]}$    </p><p>每次操作的权值都是1 所以就变成了求删除点$i$时恰好选中$i$的概率 , 也就是$\frac{1}{dep_i}$    </p><p>dfs的时候一路加起来 就是ans了。    </p><h5 id="插曲-NOIP-2016-换教室"><a href="#插曲-NOIP-2016-换教室" class="headerlink" title="插曲    NOIP 2016 换教室"></a>插曲    NOIP 2016 换教室</h5><p>其实是突然想到这个noip题的….     </p><p>屑题….   </p><p>就是给你个v个点e条边的无向图 有n - 1条移动路线, 你可以使其中m个中间点$c[i]$ 变成相应的$d[i]$  有成功概率$K[i]$  </p><p>然后让你自己选m个中间点改动 使得期望路径长度最小…. n和m是2e3 v是2e2的    </p><p>很显然要先跑一个Floyd     </p><p>然后设状态   $f[i][j][0/1]$  表示前i个要移动的目标点里要求了j个改动 0/1表示i申请或者没申请     </p><p>分类讨论 ….    </p><p>$f[i][j][0]$的话很明显就是从$f[i - 1][j][0]$ 和 $f[i - 1][j][1]$ 转移过来对吧 乘上相应的概率..    </p><p>第一个就表示前一个也没申请 第二个表示前一个申请了   </p><p>$f[i][j][1]$ 的话 要从$f[i - 1][j - 1][0]$和$f[i - 1][j - 1][1]$转移过来   </p><p>和前一个状态转移一样 只不过分类讨论比较多 成功的组合上有四种 00 01 10 11 然后对应概率乘起来~     </p><p>式子太长….   </p><p>最后跑一下$min_{i = 0}^{m}  {(f[n][i][1], f[n][i][0])} $  就是ans了…</p><h5 id="6-BZOJ-4008-亚瑟王"><a href="#6-BZOJ-4008-亚瑟王" class="headerlink" title="6 BZOJ 4008 亚瑟王"></a>6 BZOJ 4008 亚瑟王</h5><p>现在游戏有r轮 给你n张有序手牌 第$i$张牌的发动概率为$p_i (p_i∈(0, 1))$伤害为$d_i$   每张牌整局游戏至多发动一次  </p><p>每一轮中 都从第1张卡牌开始考虑 按顺序考虑每张牌   </p><p>1 如果这张卡牌在这局游戏中已经发动过技能 那么 </p><p>1.1 如果这张卡牌不是最后一张 , 就继续考虑下一张卡牌     </p><p>2 否则 (在这一局游戏中没有发动过技能)    </p><p>2.1 将其以$p_i$的概率发动     </p><p>2.2如果发动成功那么造成$d_i$点伤害 并结束这一轮游戏     </p><p>2.3如果已经是最后一张 ($i == n$)  就结束这轮游戏 否则考虑下一张手牌   </p><p>求这套卡牌在这局游戏里造成伤害的期望值。   </p><p>有T组数据。    </p><p> $1 &lt;= T &lt;= 444， 1 &lt;= n &lt;= 220， 0 &lt;= r &lt;= 132， 0 &lt; pi &lt; 1， 0 &lt;= di &lt;= 1000$</p><p>好难啊…..</p><p>但是还是容易往这方面想对不对啊 , 期望的经典套路 还是把整体期望拆成个体期望然后求和…   </p><p>设第$i$张牌被使用的概率为 $pb[i]$ 答案即为 $\sum_{i = 1}^{n}{pb[i] * d[i]}$   考虑怎么算$pb[i]$这个玩意   </p><p>很显然$pb[1] = 1 - (1 - p[i])^r$  $(1 - p[i])^r$就是一直没出过的概率。   </p><p>后面的pb值<del>显然</del>要用dp求。   </p><p>设 $f[i][j]$ 表示在$r$轮中前$i$张牌出了$j$张的概率  这个$f[i][j]$在枚举到$i$的时候一定是考虑不到$i + 1$   的</p><p>所以</p><script type="math/tex; mode=display">pb[i] = \sum_{j = 0}^{min (r, i - 1)}{f[i - 1][j]} * (1 - (1 - p[i])^{r - j})</script><p>解释一下。   在考虑$f[i - 1][j]$的时候 只多只考虑到第$i - 1$张卡 从 $i - 1$张卡里 去挑 $j$张   </p><p>这$j$张一定在i前 所以 在每张发动的牌$j$发动的那一轮 发动 完$j$后立刻结束这轮游戏 也就是说j</p><p>之后的卡都考虑不到 发动的几率是 0 ….(后面的卡全都咕掉了<del>凸显了人类本质</del>)    </p><p>所以就容易想到 在$r$轮里有$j$轮一定考虑不到$i$这张牌 所以 有$r - j$轮考虑到了….    </p><p>再来想$f[i][j]$咋算….     </p><p>前$i$张卡 发动了$j$张  所以可以考虑 第i张卡是否成功发动。    </p><p>没发动的话 有$j$轮没有考虑到$i$这张牌 所以是$r - j$次幂 </p><p>没发动：</p><script type="math/tex; mode=display">f[i][j] += f[i - 1][j] * (1 - p[i])^{r - j},\space(i > j)\\</script><p>发动的话  需要从$j - 1$转移过来 所以有$r - (j - 1)$轮没有考虑到 用1 减一下就可以了..</p><p>发动：   </p><script type="math/tex; mode=display">f[i][j] += f[i - 1][j - 1] * (1 - (1 - p[i])^{r - (j - 1)}), \space (j > 0)</script><p>时间复杂度 $\Theta (Tnr)$    </p><p>一开始我写挂了怎么调都调不出来….后来才发现是快速幂…不过快速幂的确没毛病啊…不知道为啥快速幂就是错的…..果断换成了手动俩for 预处理1 - p[i]的pow…..1发a了…        </p><p>再来看个简单的…      </p><h5 id="7-BZOJ-3143-游走"><a href="#7-BZOJ-3143-游走" class="headerlink" title="7 BZOJ 3143 游走"></a>7 BZOJ 3143 游走</h5><p>一个无向连通图，顶点从1编号到N，边从1编号到M。<br>小Z在该图上进行随机游走，初始时小Z在1号顶点，每一步小Z以相等的概率随机选 择当前顶点的某条边，沿着这条边走到下一个顶点，获得等于这条边的编号的分数。当小Z 到达N号顶点时游走结束，总分为所有获得的分数之和。<br>现在，请你对这M条边进行编号，使得小Z获得的总分的期望值最小。         </p><p>$N &lt;= 500$  </p><p>嘛 很明显 经过期望次数多的边编号要小 然后就变成了求每条边经过的期望次数   </p><p>那就先算点吧 两点互相走的概率加起来 也就是一条边两端点进入这条边的概率相加 就是经过这调边的概率    </p><p>出发点是1 所以$f[1] = 1 + \sum_{to} {\frac {f[to]}{deg[to]}}$         </p><p>其他点就是$f[i] = \sum_{to}{\frac{f[to]}{deg[to]}}$      </p><p>哎有后效性啊凉凉…..   </p><p>n是5e2的  正好跑高斯消元….   </p><p>快乐……    </p><p>然后经过每条边的期望次数      </p><p>就是$    \frac{1}{deg[{e[i].u}]}  \times f[e[i].u] + \frac{1}{deg[{e[i].v}]} \times f[e[i].v]$  排个序就完事了….       </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就是从最简单的开始积累期望和概率题目   &lt;/p&gt;
    
    </summary>
    
    
      <category term="概率" scheme="https://comeintocalm.cn/tags/%E6%A6%82%E7%8E%87/"/>
    
      <category term="期望" scheme="https://comeintocalm.cn/tags/%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>后缀数组SA</title>
    <link href="https://comeintocalm.cn/2018/11/01/SA/"/>
    <id>https://comeintocalm.cn/2018/11/01/SA/</id>
    <published>2018-11-01T11:46:31.000Z</published>
    <updated>2018-11-03T10:54:25.639Z</updated>
    
    <content type="html"><![CDATA[<p> 因为刚学习SA 所以这里就放一些SA入门级的东西    </p>   <a id="more"></a><p> 抱歉这篇文章鸽了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 因为刚学习SA 所以这里就放一些SA入门级的东西    &lt;/p&gt;
    
    </summary>
    
      <category term="OI学习笔记" scheme="https://comeintocalm.cn/categories/OI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="后缀数组" scheme="https://comeintocalm.cn/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>指数生成函数和狄利克雷生成函数</title>
    <link href="https://comeintocalm.cn/2018/11/01/%E6%8C%87%E6%95%B0%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E5%92%8C%E7%8B%84%E5%88%A9%E5%85%8B%E9%9B%B7%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    <id>https://comeintocalm.cn/2018/11/01/指数生成函数和狄利克雷生成函数/</id>
    <published>2018-11-01T11:06:40.000Z</published>
    <updated>2018-11-03T10:54:09.929Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h5 id="New-Blog"><a href="#New-Blog" class="headerlink" title="New Blog"></a>New Blog</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h5 id=&quot;New-Blog&quot;&gt;&lt;a href=&quot;#New-Blog&quot; class=&quot;headerlink&quot; title=&quot;New Blog&quot;&gt;&lt;/a&gt;New Blog&lt;/h5&gt;
      
    
    </summary>
    
      <category term="OI学习笔记" scheme="https://comeintocalm.cn/categories/OI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="生成函数" scheme="https://comeintocalm.cn/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
      <category term="卷积" scheme="https://comeintocalm.cn/tags/%E5%8D%B7%E7%A7%AF/"/>
    
  </entry>
  
</feed>
