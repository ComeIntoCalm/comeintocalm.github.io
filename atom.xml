<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cjc&#39;s Blog</title>
  
  <subtitle>弦音。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://comeintocalm.cn/"/>
  <updated>2018-11-03T00:39:45.748Z</updated>
  <id>https://comeintocalm.cn/</id>
  
  <author>
    <name>ComeIntoCalm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>期望与概率题目积累</title>
    <link href="https://comeintocalm.cn/2018/11/02/%E6%9C%9F%E6%9C%9B%E4%B8%8E%E6%A6%82%E7%8E%87%E9%A2%98%E7%9B%AE%E7%A7%AF%E7%B4%AF/"/>
    <id>https://comeintocalm.cn/2018/11/02/期望与概率题目积累/</id>
    <published>2018-11-02T00:14:05.000Z</published>
    <updated>2018-11-03T00:39:45.748Z</updated>
    
    <content type="html"><![CDATA[<p>就是从最简单的开始积累期望和概率题目   </p><h5 id="1-SPOJ-Favorite-Dice"><a href="#1-SPOJ-Favorite-Dice" class="headerlink" title="1 SPOJ Favorite Dice"></a>1 SPOJ Favorite Dice</h5><p>一个 $N$ 面 骰子 问每一面都被甩到的 次数期望是多少。  </p><p>考虑拥有一个包含i面集合时甩出来有以下的答案贡献，移项逆推 。  </p><script type="math/tex; mode=display">dp[i] = \frac {i}{n} * dp[i] + \frac{n - i}{n} * dp[i + 1] + 1</script><h5 id="2-SGU495Kids-and-Prizes"><a href="#2-SGU495Kids-and-Prizes" class="headerlink" title="2 SGU495Kids and Prizes"></a>2 SGU495Kids and Prizes</h5><p>$M$个人排队来取$N$个礼物 每个人打开的盒子 可能有礼物 也可能空 有礼物的话拿走礼物并放回盒子 没有礼物 直接放回盒子 问$M$个人取走礼物的期望个数   </p><p>考虑前i个人 能够取到的礼物期望个数 显然第一个人为1   </p><script type="math/tex; mode=display">dp[i] = \frac {n - dp[i - 1]}{n} + dp[i - 1]</script><h5 id="3-ZOJ3640Help-Me-Escape"><a href="#3-ZOJ3640Help-Me-Escape" class="headerlink" title="3 ZOJ3640Help Me Escape"></a>3 ZOJ3640Help Me Escape</h5><p>现在有n个OI考场 每个考场有固定的水平 $C[i]$ 你是个喜欢炸鱼但是水平不怎么样的OI选手    </p><p>你拥有初始战斗力 $F$ ,每天你会随机选一个考场炸鱼 如果你的 当前水平$F &gt; C[i]$ 那么就会炸鱼成功  </p><p>在炸鱼成功之后 你会装b $t [ i ]$ 天之后再回家  </p><p>如果没有成功 你就会去OJ上刷题 将自己的水平提升到 $F + C[i]$ 然后次日继续随机挑考场炸鱼  </p><p>问回家的期望天数  </p><p>可以考虑战斗力是 $f$ 时回家的期望天数 于是得到公式   </p><script type="math/tex; mode=display">dp[ f ] = \sum_{i = 1}^{n}{\begin{cases}\frac{1}{n} * t[i],\space if (f > C[i])\space\\\frac{1}{n}*dp[f+C[i]], \space if (f <= C[i])\space\end{cases}}</script><p>dp直接做不太容易啊….记忆化搜索一发就好了….</p><h5 id="4-HDU4035-Maze"><a href="#4-HDU4035-Maze" class="headerlink" title="4 HDU4035 Maze"></a>4 HDU4035 Maze</h5><p>现在有一棵树 第一天在1号节点 对于每一个节点$i$有三种可能</p><p>$1. GG,回到点1 \space 对应概率为 K[i]$     </p><p>$2.被救,\space 对应概率为 E[i]$    </p><p>$3.等概率地走到相邻节点$      </p><p>问被救走的天数期望 不能则printf $impossible$    </p><p>这个题存在后效性       </p><p>如果求$dp[S]​$ 那么$dp[S]​$ 和 $S​$ 的子节点以及父节点都有直接关系 去求子节点时又和$S​$ 本身有关系…     </p><p>一开始以为要高斯消元 发现自己tooyoungtooNaive… N^3用个毛…</p><p>然后发现了厉害的方法….</p><p>找办法排除后效性  大概就是找个公式 然后公式本身和后效性有关 然后公式之间的后效性可以相互抵消…     </p><p>然后就引用一发_kuangbin爷的….   </p><p>设$E[i]$表示在点i处, 要逃出的边数期望。 那么$ans = dp[1]$   </p><p>对于叶子结点来说    </p><script type="math/tex; mode=display">\begin{equation}\begin{split}dp[i] = K[i] * dp[1] + E[i] * 0 + (1 - K[i] - E[i])*(dp[fa[i]] + 1)\\= K[i] * dp[1] + \frac{1 - K[i] - E[i]}{deg[i]} * dp[fa[i]] + (1 - E[i] - K[i])\end{split}\end{equation}</script><p>对于非叶子结点     </p><script type="math/tex; mode=display">\begin{equation}\begin{split}dp[i] = K[i] * dp[1] + E[i] * 0 + \frac{(1 - E[i] - K[i])}{deg[i]}*(dp[fa[i]] + 1 + \sum_{son∈i}{dp[son]})\\= K[i] * dp[1] + \frac{(1 - E[i] - K[i])}{deg[i]} * dp[fa[i]] + \frac{1 - E[i] - K[i]}{deg[i]} * \sum_{son∈i}{dp[son]}\end{split}\end{equation}</script><p>然后再设对于每个节点来说        </p><script type="math/tex; mode=display">dp[i] = A[i] * dp[1] + B[i] * dp[fa[i]] +C[i];</script><p>对于非叶子结点$i$  设$j$为$i$的孩子,于是有             </p><script type="math/tex; mode=display">\begin{equation}\begin{split}\sum_{son∈i}{dp[son]} &= \sum{dp[j]}\\&=\sum{(A[j] * dp[1] + B[j] * dp[fa[j]] + C[j])}\\&=\sum{(A[j] * dp[1] + B[j] * dp[i] + C[j])}\\\end{split}\end{equation}</script><p>把上面的式子带进去 就可以得到    </p><script type="math/tex; mode=display">(1 - \frac{1 - K[i] - E[i]}{deg[i]} * \sum{B[j]}) * dp[i] = (K[i] + (\frac{1 - K[i] - E[i]}{deg[i]}) * \sum{A[j]}) * dp[1] \\+ (\frac{1 - K[i] - E[i]}{deg[i]}) * dp[fa[i]] +(1 - K[i] - E[i]) + \frac{1 - K[i] - E[i]}{deg[i]} * \sum{C[j]}</script><p>由此可得     </p><script type="math/tex; mode=display">\begin{split}A[i] &= (K[i] + \frac{1 - K[i] - E[i]}{deg[i]}*\sum{A[j]})\\B[i] &= \frac{1 - K[i] - E[i]}{m}\\C[i] &= ((1 - K[i] - E[i]) + \frac{1 - K[i] - E[i]}{m} * \sum{C[j]})\end{split}</script><p>然后用dfs做。   </p><p>再来看个休闲题…..     </p><h5 id="5-CF-280C"><a href="#5-CF-280C" class="headerlink" title="5 CF 280C"></a>5 CF 280C</h5><p>给出一棵点均为白色的树 每次随机等概率选择一未染黑的点 将他及其子树染黑 问染黑整个树的期望操作次数    </p><p>直接做不太好下手   </p><p>所以考虑期望的线性性 $E(ax + by) = a <em> E(x) + b </em> E(y)$ 所以问题就转化成了求$\sum{ENode[i]}$    </p><p>每次操作的权值都是1 所以就变成了求删除点$i$时恰好选中$i$的概率 , 也就是$\frac{1}{dep_i}$    </p><p>dfs的时候一路加起来 就是ans了。    </p><h5 id="6-BZOJ-4006-亚瑟王"><a href="#6-BZOJ-4006-亚瑟王" class="headerlink" title="6    BZOJ 4006 亚瑟王"></a>6    BZOJ 4006 亚瑟王</h5><p>现在游戏有r轮 给你n张有序手牌 第$i$张牌的发动概率为$p_i (p_i∈(0, 1))$伤害为$d_i$   每张牌整局游戏至多发动一次  </p><p>每一轮中 都从第1张卡牌开始考虑 按顺序考虑每张牌   </p><p>1 如果这张卡牌在这局游戏中已经发动过技能 那么 </p><p>1.1 如果这张卡牌不是最后一张 , 就继续考虑下一张卡牌     </p><p>2 否则 (在这一局游戏中没有发动过技能)    </p><p>2.1 将其以$p_i$的概率发动     </p><p>2.2如果发动成功那么造成$d_i$点伤害 并结束这一轮游戏     </p><p>2.3如果已经是最后一张 ($i == n$)  就结束这轮游戏 否则考虑下一张手牌   </p><p>求这套卡牌在这局游戏里造成伤害的期望值。   </p><p>有T组数据。    </p><p>$1 &lt;= T &lt;= 444， 1 &lt;= n &lt;= 220， 0 &lt;= r &lt;= 132， 0 &lt; pi &lt; 1， 0 &lt;= di &lt;= 1000$</p><p>好难啊…..</p><p>但是还是容易往这方面想对不对啊 , 期望的经典套路 还是把整体期望拆成个体期望然后求和…   </p><p>设第$i$张牌被使用的概率为 $pb[i]$ 答案即为 $\sum_{i = 1}^{n}{pb[i] * d[i]}$   考虑怎么算$pb[i]$这个玩意   </p><p>很显然$pb[1] = 1 - (1 - p[i])^r$  $(1 - p[i])^r$就是一直没出过的概率。   </p><p>后面的pb值<del>显然</del>要用dp求。   </p><p>设 $f[i][j]$ 表示在$r$轮中前$i$张牌出了$j$张的概率  这个$f[i][j]$在枚举到$i$的时候一定是考虑不到$i + 1$   的</p><p>所以</p><script type="math/tex; mode=display">pb[i] = \sum_{j = 0}^{min (r, i - 1)}{f[i - 1][j]} * (1 - (1 - p[i])^{r - j})</script><p>解释一下。   在考虑$f[i - 1][j]$的时候 只多只考虑到第$i - 1$张卡 从 $i - 1$张卡里 去挑 $j$张   </p><p>这$j$张一定在i前 所以 在每张发动的牌$j$发动的那一轮 发动 完$j$后立刻结束这轮游戏 也就是说j</p><p>之后的卡都考虑不到 发动的几率是 0 ….(后面的卡全都咕掉了<del>凸显了人类本质</del>)    </p><p>所以就容易想到 在$r$轮里有$j$轮一定考虑不到$i$这张牌 所以 有$r - j$轮考虑到了….    </p><p>再来想$f[i][j]$咋算….     </p><p>前$i$张卡 发动了$j$张  所以可以考虑 第i张卡是否成功发动。    </p><p>没发动的话 有$j$轮没有考虑到$i$这张牌 所以是$r - j$次幂 </p><p>没发动：</p><script type="math/tex; mode=display">f[i][j] += f[i - 1][j] * (1 - p[i])^{r - j},\space(i > j)\\</script><p>发动的话  需要从$j - 1$转移过来 所以有$r - (j - 1)$轮没有考虑到 用1 减一下就可以了..</p><p>发动：   </p><script type="math/tex; mode=display">f[i][j] += f[i - 1][j - 1] * (1 - (1 - p[i])^{r - (j - 1)}), \space (j > 0)</script><p>时间复杂度 $\Theta (Tnr)$    </p><p>一开始我写挂了怎么调都调不出来….后来才发现是快速幂…不过快速幂的确没毛病啊…不知道为啥快速幂就是错的…..果断换成了手动俩for 预处理1 - p[i]的pow…..1发a了…     </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;就是从最简单的开始积累期望和概率题目   &lt;/p&gt;
&lt;h5 id=&quot;1-SPOJ-Favorite-Dice&quot;&gt;&lt;a href=&quot;#1-SPOJ-Favorite-Dice&quot; class=&quot;headerlink&quot; title=&quot;1 SPOJ Favorite Dice&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="OI学习笔记" scheme="https://comeintocalm.cn/categories/OI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="概率" scheme="https://comeintocalm.cn/tags/%E6%A6%82%E7%8E%87/"/>
    
      <category term="期望" scheme="https://comeintocalm.cn/tags/%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>后缀数组SA</title>
    <link href="https://comeintocalm.cn/2018/11/01/SA/"/>
    <id>https://comeintocalm.cn/2018/11/01/SA/</id>
    <published>2018-11-01T11:46:31.000Z</published>
    <updated>2018-11-01T12:45:22.662Z</updated>
    
    <content type="html"><![CDATA[<p> 因为刚学习SA 所以这里就放一些SA入门级的东西    </p><p> 抱歉这篇文章鸽了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 因为刚学习SA 所以这里就放一些SA入门级的东西    &lt;/p&gt;
&lt;p&gt; 抱歉这篇文章鸽了&lt;/p&gt;

      
    
    </summary>
    
      <category term="OI学习笔记" scheme="https://comeintocalm.cn/categories/OI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="后缀数组" scheme="https://comeintocalm.cn/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>指数生成函数和狄利克雷生成函数</title>
    <link href="https://comeintocalm.cn/2018/11/01/%E6%8C%87%E6%95%B0%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E5%92%8C%E7%8B%84%E5%88%A9%E5%85%8B%E9%9B%B7%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    <id>https://comeintocalm.cn/2018/11/01/指数生成函数和狄利克雷生成函数/</id>
    <published>2018-11-01T11:06:40.000Z</published>
    <updated>2018-11-01T12:45:43.100Z</updated>
    
    <content type="html"><![CDATA[<h5 id="New-Blog"><a href="#New-Blog" class="headerlink" title="New Blog"></a>New Blog</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;New-Blog&quot;&gt;&lt;a href=&quot;#New-Blog&quot; class=&quot;headerlink&quot; title=&quot;New Blog&quot;&gt;&lt;/a&gt;New Blog&lt;/h5&gt;
      
    
    </summary>
    
      <category term="OI学习笔记" scheme="https://comeintocalm.cn/categories/OI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="生成函数" scheme="https://comeintocalm.cn/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
      <category term="卷积" scheme="https://comeintocalm.cn/tags/%E5%8D%B7%E7%A7%AF/"/>
    
  </entry>
  
</feed>
